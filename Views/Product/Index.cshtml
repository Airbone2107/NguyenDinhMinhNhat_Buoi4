@model IEnumerable<NguyenDinhMinhNhat_Buoi4.Models.Product>

@{
	ViewData["Title"] = "Tất cả sản phẩm";
	string FormatCurrency(decimal price) => string.Format("{0:N0}đ", price);
}

<div class="products-header">
	<h1><i class="fas fa-box-open"></i> Tất cả sản phẩm</h1>
	<p>Khám phá những sản phẩm đa dạng và chất lượng tại cửa hàng của chúng tôi</p>
</div>

<div class="filter-container">
	<div class="filter-wrapper">
		<div class="search-box">
			<input type="text" id="searchInput" placeholder="Tìm kiếm sản phẩm..." />
			<button id="searchButton"><i class="fas fa-search"></i></button>
		</div>
		<div class="filter-options">
			<select id="sortSelect">
				<option value="">Sắp xếp theo</option>
				<option value="price-asc">Giá: Thấp đến cao</option>
				<option value="price-desc">Giá: Cao đến thấp</option>
				<option value="name-asc">Tên: A-Z</option>
				<option value="name-desc">Tên: Z-A</option>
			</select>
		</div>
	</div>
</div>

<!-- Danh sách sản phẩm -->
<div class="product-container">
	<div class="product-list" id="productList">
		@foreach (var product in Model)
		{
			<div class="product-card" data-name="@product.Name.ToLower()" data-price="@product.Price">
				<a asp-action="Display" asp-route-id="@product.Id" class="product-link">
					<div class="product-image">
						@if (!string.IsNullOrEmpty(product.ImageUrl))
						{
							<img src="@product.ImageUrl" alt="@product.Name">
							<div class="product-overlay">
								<div class="overlay-content">
									<span>Xem chi tiết</span>
								</div>
							</div>
						}
						else
						{
							<div class="no-image">
								<i class="fas fa-image"></i>
								<span>Không có hình ảnh</span>
							</div>
						}
					</div>
					<div class="product-info">
						<h3 class="product-name">@product.Name</h3>
						<div class="product-category">
							@if (product.Category != null)
							{
								<span>@product.Category.Name</span>
							}
						</div>
						<p class="product-description">
							@(product.Description?.Length > 100 ? product.Description.Substring(0, 100) + "..." : product.Description)
						</p>
						<div class="product-bottom">
							<div class="product-price">@FormatCurrency(product.Price)</div>
						</div>
					</div>
				</a>
				<div class="product-actions">
					<button class="btn-cart" onclick="addToCart(@product.Id, 1)">
						<i class="fas fa-shopping-cart"></i> Thêm vào giỏ
					</button>
					<a asp-action="Display" asp-route-id="@product.Id" class="btn-detail">Chi tiết <i class="fas fa-arrow-right"></i></a>
				</div>
			</div>
		}
	</div>
</div>

<style>
	.products-header {
		text-align: center;
		padding: 40px 0;
		background: linear-gradient(135deg, #3498db, #2ecc71);
		color: white;
		border-radius: 10px;
		margin-bottom: 30px;
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
	}
	
	.products-header h1 {
		font-size: 2.5rem;
		margin-bottom: 15px;
		text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
	}
	
	.products-header p {
		font-size: 1.1rem;
		max-width: 700px;
		margin: 0 auto;
		opacity: 0.9;
	}
	
	.filter-container {
		background-color: white;
		padding: 15px;
		border-radius: 10px;
		box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
		margin-bottom: 30px;
	}
	
	.filter-wrapper {
		display: flex;
		justify-content: space-between;
		align-items: center;
		flex-wrap: wrap;
		gap: 15px;
	}
	
	.search-box {
		display: flex;
		flex: 1;
		max-width: 400px;
		position: relative;
	}
	
	.search-box input {
		width: 100%;
		padding: 12px 15px;
		border: 1px solid #ddd;
		border-radius: 5px;
		font-size: 16px;
		box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
	}
	
	.search-box button {
		position: absolute;
		right: 5px;
		top: 50%;
		transform: translateY(-50%);
		background: transparent;
		border: none;
		color: #3498db;
		font-size: 18px;
		cursor: pointer;
	}
	
	.filter-options select {
		padding: 12px 20px;
		border: 1px solid #ddd;
		border-radius: 5px;
		font-size: 16px;
		background-color: white;
		cursor: pointer;
	}
	
	.product-container {
		padding: 20px 0;
	}
	
	.product-list {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
		gap: 30px;
	}
	
	.product-card {
		background: white;
		border-radius: 12px;
		overflow: hidden;
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
		transition: all 0.3s ease;
		display: flex;
		flex-direction: column;
		height: 100%;
	}
	
	.product-card:hover {
		transform: translateY(-8px);
		box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
	}
	
	.product-link {
		text-decoration: none;
		color: inherit;
		display: block;
		flex-grow: 1;
	}
	
	.product-image {
		position: relative;
		height: 250px;
		overflow: hidden;
		display: flex;
		align-items: center;
		justify-content: center;
		background-color: #f8f8f8;
	}
	
	.product-image img {
		max-width: 100%;
		max-height: 100%;
		object-fit: contain;
		transition: transform 0.6s ease;
	}
	
	.product-card:hover .product-image img {
		transform: scale(1.08);
	}
	
	.product-overlay {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.4);
		display: flex;
		justify-content: center;
		align-items: center;
		opacity: 0;
		transition: opacity 0.3s ease;
	}
	
	.overlay-content {
		text-align: center;
	}
	
	.overlay-content span {
		display: inline-block;
		padding: 12px 24px;
		background-color: white;
		color: #333;
		font-weight: bold;
		border-radius: 30px;
		transform: translateY(20px);
		transition: transform 0.3s ease;
	}
	
	.product-card:hover .product-overlay {
		opacity: 1;
	}
	
	.product-card:hover .overlay-content span {
		transform: translateY(0);
	}
	
	.no-image {
		height: 100%;
		background-color: #f7f7f7;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		color: #999;
	}
	
	.no-image i {
		font-size: 3em;
		margin-bottom: 15px;
	}
	
	.product-info {
		padding: 20px;
		flex-grow: 1;
		display: flex;
		flex-direction: column;
	}
	
	.product-name {
		font-size: 1.2rem;
		margin-bottom: 5px;
		font-weight: 600;
		color: #2c3e50;
	}
	
	.product-category {
		font-size: 0.9rem;
		color: #7f8c8d;
		margin-bottom: 12px;
	}
	
	.product-category span {
		background-color: #f0f0f0;
		padding: 3px 10px;
		border-radius: 30px;
		display: inline-block;
	}
	
	.product-description {
		color: #666;
		font-size: 0.95rem;
		line-height: 1.5;
		margin-bottom: 15px;
		flex-grow: 1;
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}
	
	.product-bottom {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-top: auto;
	}
	
	.product-price {
		font-weight: bold;
		color: #e74c3c;
		font-size: 1.3rem;
	}
	
	.product-rating {
		color: #f39c12;
		font-size: 0.9rem;
	}
	
	.product-actions {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 10px;
		padding: 15px;
		background-color: #f9f9f9;
		border-top: 1px solid #eee;
	}
	
	.btn-cart, .btn-detail {
		padding: 12px;
		text-align: center;
		border-radius: 5px;
		font-size: 0.95rem;
		font-weight: 600;
		transition: all 0.3s;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 8px;
	}
	
	.btn-cart {
		background-color: #2ecc71;
		color: white;
		border: none;
	}
	
	.btn-cart:hover {
		background-color: #27ae60;
	}
	
	.btn-detail {
		background-color: white;
		color: #3498db;
		border: 1px solid #3498db;
		text-decoration: none;
	}
	
	.btn-detail:hover {
		background-color: #3498db;
		color: white;
	}
	
	.no-results {
		grid-column: 1 / -1;
		text-align: center;
		padding: 40px;
		font-size: 1.2rem;
		color: #555;
		background: white;
		border-radius: 10px;
		box-shadow: 0 2px 8px rgba(0,0,0,0.1);
	}
	
	@@media (max-width: 768px) {
		.product-list {
			grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
			gap: 20px;
		}
		
		.filter-wrapper {
			flex-direction: column;
			align-items: stretch;
		}
		
		.search-box {
			max-width: 100%;
		}
		
		.products-header h1 {
			font-size: 2rem;
		}
		
		.product-image {
			height: 200px;
		}
	}
</style>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const productList = document.getElementById('productList');
        const products = Array.from(productList.getElementsByClassName('product-card'));
        const sortSelect = document.getElementById('sortSelect');
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');
        
        // Hàm sắp xếp sản phẩm
        function sortProducts(sortBy) {
            const sortedProducts = [...products].sort((a, b) => {
                switch(sortBy) {
                    case 'price-asc':
                        return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
                    case 'price-desc':
                        return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
                    case 'name-asc':
                        return a.dataset.name.localeCompare(b.dataset.name);
                    case 'name-desc':
                        return b.dataset.name.localeCompare(a.dataset.name);
                    default:
                        return 0;
                }
            });
            
            // Xóa các sản phẩm hiện tại
            while (productList.firstChild) {
                productList.removeChild(productList.firstChild);
            }
            
            // Thêm lại các sản phẩm đã sắp xếp
            sortedProducts.forEach(product => {
                productList.appendChild(product);
            });
        }
        
        // Hàm tìm kiếm sản phẩm
        function searchProducts(query) {
            query = query.toLowerCase().trim();
            
            let hasResults = false;
            
            products.forEach(product => {
                const name = product.dataset.name;
                
                if (name.includes(query)) {
                    product.style.display = '';
                    hasResults = true;
                } else {
                    product.style.display = 'none';
                }
            });
            
            // Kiểm tra nếu không có kết quả nào
            const noResultsElement = document.querySelector('.no-results');
            if (!hasResults) {
                if (!noResultsElement) {
                    const noResults = document.createElement('div');
                    noResults.className = 'no-results';
                    noResults.innerHTML = '<i class="fas fa-search"></i> Không tìm thấy sản phẩm nào phù hợp';
                    productList.appendChild(noResults);
                }
            } else if (noResultsElement) {
                noResultsElement.remove();
            }
        }
        
        // Sự kiện thay đổi lựa chọn sắp xếp
        sortSelect.addEventListener('change', function() {
            sortProducts(this.value);
        });
        
        // Sự kiện tìm kiếm
        searchButton.addEventListener('click', function() {
            searchProducts(searchInput.value);
        });
        
        // Tìm kiếm khi nhấn Enter
        searchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                searchProducts(this.value);
            }
        });
    });
    
    // Hàm thêm sản phẩm vào giỏ hàng
    function addToCart(productId, quantity) {
        fetch(`/ShoppingCart/AddToCart?productId=${productId}&quantity=${quantity}`, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Hiển thị thông báo thành công
                showNotification('Đã thêm sản phẩm vào giỏ hàng!', 'success');
                
                // Cập nhật số lượng sản phẩm trong giỏ hàng
                updateCartItemCount();
                updateCartPreview();
            }
        })
        .catch(error => {
            console.error('Lỗi khi thêm vào giỏ hàng:', error);
            showNotification('Có lỗi xảy ra khi thêm sản phẩm!', 'error');
        });
    }
    
    // Hàm hiển thị thông báo
    function showNotification(message, type = 'success') {
        // Tạo phần tử thông báo
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-times-circle'}"></i>
                <span>${message}</span>
            </div>
        `;
        
        // Thêm vào body
        document.body.appendChild(notification);
        
        // Hiển thị từ từ
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        // Tự động ẩn sau 3 giây
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }
</script>

<style>
    /* CSS cho thông báo */
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateY(-10px);
        opacity: 0;
        transition: all 0.3s ease;
    }
    
    .notification.show {
        transform: translateY(0);
        opacity: 1;
    }
    
    .notification.success {
        background-color: #2ecc71;
        color: white;
    }
    
    .notification.error {
        background-color: #e74c3c;
        color: white;
    }
    
    .notification-content {
        display: flex;
        align-items: center;
    }
    
    .notification-content i {
        margin-right: 10px;
        font-size: 1.2rem;
    }
</style>
}
